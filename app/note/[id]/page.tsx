"use client";

import NotePreview from "@/components/note/note-preview";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import PracticeTest from "@/components/note/practice-test";
import VoteButtons from "@/components/note/vote-buttons";
import { exampleClass, exampleNote, exampleSummary } from "@/lib/constants";
import { formatDate } from "@/lib/utils";
import ReportButton from "@/components/note/report-button";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { onAuthStateChanged, User } from "firebase/auth";
import { auth, db } from "@/app/firebaseConfig";
import {
  updateDoc,
  doc,
  increment,
  getDoc,
  DocumentData,
} from "firebase/firestore";
import SaveButton from "@/components/note/save-button";
import DownloadButton from "@/components/note/download-button";
import { OpenAI } from "openai"; // Import OpenAI

export default function NotePage({
  params,
  searchParams,
}: {
  params: { id: string };
  searchParams: { tab: string | undefined };
}) {
  const router = useRouter();
  const [user, setUser] = useState<User | string | null>(
    "I am not null, idiot >:("
  );
  const [noteData, setNoteData] = useState<DocumentData>();
  const [courseData, setCourseData] = useState<DocumentData>();
  const [practiceTest, setPracticeTest] = useState<string>(""); // Store practice test content
  const [loadingTest, setLoadingTest] = useState(false); // Loading state for practice test

  const client = new OpenAI({
    apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY, 
    dangerouslyAllowBrowser: true,
  });

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      return setUser(currentUser);
    });
    return () => unsubscribe();
  }, []);
  if (!user) {
    router.push("/");
    return null;
  }

  useEffect(() => {
    if (user) {
      const incrementViewCount = async () => {
        try {
          const noteRef = doc(db, "notes", params.id);
          await updateDoc(noteRef, {
            views: increment(1),
          });
        } catch (error) {
          console.error("Error updating view count: ", error);
        }
      };

      incrementViewCount();
    }
  }, [user, params.id]);

  // Fetch note data from Firestore
  useEffect(() => {
    const fetchData = async () => {
      // Get note data
      try {
        const noteRef = doc(db, "notes", params.id);
        const noteSnapshot = await getDoc(noteRef);

        if (noteSnapshot.exists()) {
          setNoteData(noteSnapshot.data());
          // Get course data from course_id in note
          try {
            const courseRef = doc(db, "courses", noteSnapshot.data().course_id);
            const courseSnapshot = await getDoc(courseRef);

            if (courseSnapshot.exists()) {
              setCourseData(courseSnapshot.data());
            } else {
              console.error("Course not found");
            }
          } catch (error) {
            console.error("Error fetching course data:", error);
          }
        } else {
          console.error("Note not found");
        }
      } catch (error) {
        console.error("Error fetching note data:", error);
      }
    };

    fetchData();
  }, [params.id]);

  // Generate practice test
  const generatePracticeTest = async () => {
    
    if (!noteData?.summary) return;

    setLoadingTest(true);

    try {
      const prompt = `
        You are a teacher creating a practice test. Based on the following summary of notes:
        ${noteData.summary}

        Generate 5 practice test questions in a Q&A format.
      `;

      const response = await client.chat.completions.create({
        messages: [{ role: "user", content: prompt }],
        model: "gpt-4",
        max_tokens: 300,
      });

      const testContent = response.choices[0]?.message?.content || "No test generated.";
      setPracticeTest(testContent);
    } catch (error) {
      console.error("Error generating practice test:", error);
      setPracticeTest("Failed to generate practice test.");
    } finally {
      setLoadingTest(false);
    }
  };

  // Trigger practice test generation on load if practice tab is active
  useEffect(() => {
    if (searchParams.tab === "practice") {
      generatePracticeTest();
    }
  }, [searchParams.tab, noteData]);

  interface PracticeTestProps {
    testContent: string; // Questions and answers generated by the LLM
  }
  
  const PracticeTest: React.FC<PracticeTestProps> = ({ testContent }) => {
    const [userAnswers, setUserAnswers] = useState<string[]>([]); // User's answers
    const [showAnswers, setShowAnswers] = useState(false); // Whether to show generated answers
  
    // Parse the practice test content (questions and answers)
    const questionsAndAnswers = testContent
      .split("\n\n") // Split by double newlines
      .map((q) => {
        const [question, ...answer] = q.split("\n"); // Separate question and answer
        return { question: question.trim(), answer: answer.join(" ").trim() };
      });
  
    // Update user answer for a specific question
    const handleAnswerChange = (index: number, value: string) => {
      const updatedAnswers = [...userAnswers];
      updatedAnswers[index] = value;
      setUserAnswers(updatedAnswers);
    };
  
    // Handle submission to reveal the answers
    const handleSubmit = () => {
      setShowAnswers(true);
    };
  
    return (
      <div className="practice-test">
        <h3 className="font-bold text-xl mb-4">Practice Test</h3>
        {questionsAndAnswers.map((qa, index) => (
          <div key={index} className="mb-6">
            <p className="font-semibold">{qa.question}</p>
            {!showAnswers ? (
              <textarea
                className="w-full mt-2 p-2 border rounded"
                placeholder="Enter your answer..."
                value={userAnswers[index] || ""}
                onChange={(e) => handleAnswerChange(index, e.target.value)}
              />
            ) : (
              <div>
                <p className="mt-2">
                  <strong>Your Answer:</strong> {userAnswers[index] || "No answer provided."}
                </p>
                <p>
                  <strong>Correct Answer:</strong> {qa.answer}
                </p>
              </div>
            )}
          </div>
        ))}
        {!showAnswers && (
          <button
            onClick={handleSubmit}
            className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
          >
            Submit and Reveal Answers
          </button>
        )}
      </div>
    );
  };
  

  return (
    noteData &&
    courseData &&
    typeof user !== "string" && (
      <main className="container mx-auto h-[calc(100vh-64px)] p-8 sm:p-16">
        <div className="w-full flex flex-col lg:flex-row items-start lg:items-end justify-center lg:justify-between space-y-4 lg:space-y-0">
          <div className="text-6xl font-semibold">{noteData.title}</div>
          <div className="flex space-x-4">
            <VoteButtons noteId={params.id} userId={user.uid} />
            <SaveButton noteId={params.id} userId={user.uid} />
            <DownloadButton
              noteId={params.id}
              fileUrl={noteData.file_url}
              download={noteData.title}
            />
            <ReportButton />
          </div>
        </div>
        <div className="text-3xl font-medium mt-2 text-border">
          Added {formatDate(noteData.upload_date)}
        </div>
        <div className="mt-2 flex space-x-3">
          <Badge className="whitespace-nowrap">{courseData.course_name}</Badge>
          <Badge className="whitespace-nowrap">
            {noteData.quarter} {noteData.year}
          </Badge>
        </div>
        <div className="w-full flex flex-col lg:flex-row justify-between space-x-0 space-y-8 lg:space-x-16 lg:space-y-0 mt-9 pl-12">
          <NotePreview file={noteData.file_url} />
          <Tabs
            defaultValue={
              searchParams.tab === "practice" ? "practice" : "summary"
            }
            className="flex-1 ml-16 overflow-hidden flex flex-col space-y-4 items-center"
          >
            <TabsList className="w-full grid grid-cols-2">
              <TabsTrigger value="summary" className="font-semibold">
                Summary
              </TabsTrigger>
              <TabsTrigger value="practice" className="font-semibold">
                Practice Test
              </TabsTrigger>
            </TabsList>
            <TabsContent value="summary" className="w-full">
              <div className="whitespace-pre-wrap mb-8">
                {noteData.summary}
                {practiceTest && (
                  <div className="mt-4">
                    <h3 className="font-bold">Practice Test Results:</h3>
                    <div>{practiceTest}</div>
                  </div>
                )}
              </div>
            </TabsContent>
            <TabsContent value="practice" className="w-full">
              {loadingTest ? (
                <div className="mb-8">Loading practice test...</div>
              ) : (
                <>
                  <PracticeTest testContent={practiceTest} />
                  <div className="mt-4 mb-8">
                    <button
                      onClick={generatePracticeTest}
                      className="bg-red-500 text-white px-4 py-2 rounded-md"
                    >
                      {practiceTest ? "Regenerate Practice Test" : "Generate Practice Test"}
                    </button>
                  </div>
                </>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </main>
    )
  );
}
